{"version":3,"file":"static/js/315.b7d79966.chunk.js","mappings":"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","sources":["hooks/useParseQueryParamsToState.ts","components/Loaders/Category/CategoryProductCardLoader.tsx","hooks/useUpdateQuery.ts","pages/Category/Products.tsx","pages/Category/ProductsPagination.tsx","pages/Search/SearchPageHeader.tsx","pages/Search/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport qs from \"qs\";\r\nimport {setFilters} from \"../store/slices/filterSlice\";\r\nimport {useTypedDispatch} from \"./redux\";\r\nimport {setSearchRequest} from \"../store/slices/searchSlice\";\r\n\r\nconst useParseQueryParamsToState = () => {\r\n    const dispatch = useTypedDispatch();\r\n    React.useEffect(() => {\r\n        if (window.location.search) {\r\n            const params = qs.parse(window.location.search.substring(1))\r\n            dispatch(setFilters(params))\r\n            if (params.search) dispatch(setSearchRequest(params.search))\r\n        }}, []\r\n    )\r\n}\r\nexport default useParseQueryParamsToState","import React from 'react';\r\nimport ContentLoader from \"react-content-loader\";\r\nimport {Grid} from \"@mui/material\";\r\n\r\n\r\nconst CategoryProductCardLoader = () => {\r\n    return (\r\n        <Grid item xs={2} sm={3} md={3}>\r\n            <ContentLoader\r\n                speed={2}\r\n                width={370}\r\n                height={575}\r\n                viewBox=\"0 0 370 575\"\r\n                backgroundColor=\"#f3f3f3\"\r\n                foregroundColor=\"#ecebeb\"\r\n            >\r\n                <rect x=\"0\" y=\"0\" rx=\"0\" ry=\"0\" width=\"370\" height=\"525\"/>\r\n                <rect x=\"2\" y=\"532\" rx=\"0\" ry=\"0\" width=\"370\" height=\"15\"/>\r\n                <rect x=\"3\" y=\"552\" rx=\"0\" ry=\"0\" width=\"50\" height=\"21\"/>\r\n            </ContentLoader>\r\n        </Grid>);\r\n};\r\n\r\nexport default CategoryProductCardLoader;","import {useTypedDispatch, useTypedSelector} from \"./redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport qs from \"qs\";\r\nimport {setQueryRequest} from \"../store/slices/filterSlice\";\r\nimport {getFilters} from \"../store/selectors/filter\";\r\nimport {getSearchRequest} from \"../store/selectors/search\";\r\nimport {setSearchRequest} from \"../store/slices/searchSlice\";\r\n\r\nconst useUpdateQuery = (\r\n    categoryId: string | undefined, categoryName: string | undefined, isMounted: {current: boolean},\r\n    clearSearchRequest: boolean = false\r\n) => {\r\n    const {sizes, color, sort, currentPage, itemsLimit} = useTypedSelector(getFilters)\r\n    const search = useTypedSelector(getSearchRequest)\r\n    const dispatch = useTypedDispatch()\r\n    const navigate = useNavigate()\r\n    React.useEffect(\r\n        () => {\r\n            // clear search request if it's not search page\r\n            if (clearSearchRequest) dispatch(setSearchRequest(null))\r\n            const query = qs.stringify(\r\n                {\r\n                    sizes,\r\n                    color,\r\n                    p: currentPage,\r\n                    l: itemsLimit,\r\n                    sortBy: sort.property,\r\n                    order: sort.order,\r\n                    search\r\n                },\r\n                {skipNulls: true, arrayFormat: 'comma'}\r\n            )\r\n            if (isMounted.current) navigate(`?${query}`)\r\n            dispatch(setQueryRequest(`${categoryId}/${categoryName}?${query}`))\r\n            isMounted.current = true\r\n        },\r\n        [sizes, color, sort, categoryName, categoryId, currentPage, itemsLimit, search]\r\n    )\r\n}\r\nexport default useUpdateQuery","import React, {FC, useRef} from 'react'\r\nimport ProductCard from '../../components/ProductCard'\r\nimport CategoryProductCardLoader from '../../components/Loaders/Category/CategoryProductCardLoader'\r\nimport {Grid} from '@mui/material'\r\nimport {useGetProductCardsQuery} from \"../../services/productsService\";\r\nimport {useTypedSelector} from \"../../hooks/redux\";\r\nimport {getFilters} from \"../../store/selectors/filter\";\r\nimport useUpdateQuery from \"../../hooks/useUpdateQuery\";\r\nimport BasicPreloader from \"../../components/Loaders/BasicPreloader\";\r\nimport LoadingError from \"../../components/LoadingError\";\r\n\r\ninterface Props {\r\n\tcategoryId: string | undefined,\r\n\tcategoryName: string | undefined,\r\n\tclearSearchRequest?: boolean\r\n}\r\n\r\nconst Products: FC<Props> = ({categoryId, categoryName, clearSearchRequest = false}) => {\r\n\tconst {requestQuery} = useTypedSelector(getFilters)\r\n\tlet isMounted = useRef(false)\r\n\tuseUpdateQuery(categoryId, categoryName, isMounted, clearSearchRequest)\r\n\tconst {\r\n\t\tdata: products, isLoading, isError, isFetching, refetch\r\n\t} = useGetProductCardsQuery(requestQuery)\r\n\treturn (\r\n\t\t<Grid\r\n\t\t\tcontainer spacing={{ xs: 2, md: 3 }}\r\n\t\t\tcolumns={{ xs: 4, sm: 8, md: 12 }}\r\n\t\t>\r\n\t\t\t{!isFetching && !isError && products &&\r\n\t\t\t\tproducts.map((product) => (\r\n\t\t\t\t\t<Grid item xs={2} sm={3} md={3} key={product.id}>\r\n\t\t\t\t\t\t<ProductCard product={product} />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t))\r\n\t\t\t}\r\n\t\t\t<BasicPreloader\r\n\t\t\t\tisLoading={isLoading}\r\n\t\t\t\tisFetching={isFetching}\r\n\t\t\t\titemsToShow={8}\r\n\t\t\t>\r\n\t\t\t\t<CategoryProductCardLoader />\r\n\t\t\t</BasicPreloader>\r\n\t\t\t{isError &&\r\n\t\t\t\t<LoadingError reload={refetch} />\r\n\t\t\t}\r\n\t\t</Grid>\r\n\t)\r\n}\r\n\r\nexport default Products","import React from 'react';\r\nimport {Pagination} from \"@mui/material\";\r\nimport {setCurrentPage, setItemsCount} from \"../../store/slices/filterSlice\";\r\nimport {useTypedDispatch, useTypedSelector} from \"../../hooks/redux\";\r\nimport {useGetProductCardsQuery} from \"../../services/productsService\";\r\nimport {getFilters} from \"../../store/selectors/filter\";\r\n\r\nconst ProductsPagination = () => {\r\n    const {currentPage, requestQuery, itemsLimit} = useTypedSelector(getFilters)\r\n    // change limit to see how many pages to show\r\n    // P.S. API doesn't return the amount of products\r\n    const {data: productsArray} = useGetProductCardsQuery(\r\n        requestQuery.replace( `p=${currentPage}&l=${itemsLimit}`, 'p=1&l=999' )\r\n    )\r\n    const dispatch = useTypedDispatch()\r\n    let [pagesCount, setPagesCount] = React.useState(1)\r\n    React.useEffect( () => {\r\n        let amountOfProducts = productsArray ? productsArray.length : 1\r\n        const totalPages = Math.ceil( amountOfProducts / itemsLimit)\r\n        if (totalPages > 1) setPagesCount( totalPages )\r\n        dispatch(setItemsCount(amountOfProducts))\r\n    }, [productsArray, itemsLimit] )\r\n\r\n    const handleChange = ( e: React.ChangeEvent<unknown>, pageNumber: number ) => {\r\n        dispatch(setCurrentPage(pageNumber))\r\n    }\r\n    if (pagesCount < 2) return <span></span>\r\n    return (\r\n        <Pagination\r\n            count={+pagesCount}\r\n            defaultPage={+currentPage}\r\n            page={+currentPage}\r\n            sx={{mb: 6, mt: 3}}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ProductsPagination;","import React from 'react';\r\nimport {Container, Typography} from \"@mui/material\";\r\nimport SearchField from \"../../components/Header/Search/SearchField\";\r\nimport {useTypedSelector} from \"../../hooks/redux\";\r\n\r\nconst SearchPageHeader = () => {\r\n    const searchRequest = useTypedSelector( state => state.searchSlice.searchRequest )\r\n    const itemsCount = useTypedSelector(state => state.filterSlice.itemsCount)\r\n    return (\r\n        <Container maxWidth='md' sx={{py: 6}} >\r\n            <Typography sx={{pb: 4}}>\r\n                {`${itemsCount} `}\r\n                results for \"{searchRequest}\"\r\n            </Typography>\r\n            <SearchField />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SearchPageHeader;","import React from 'react';\r\nimport {Container} from \"@mui/material\";\r\nimport ProductsPagination from \"../Category/ProductsPagination\";\r\nimport Products from \"../Category/Products\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport useParseQueryParamsToState from \"../../hooks/useParseQueryParamsToState\";\r\nimport SearchPageHeader from \"./SearchPageHeader\";\r\n\r\nconst Search = () => {\r\n    let {categoryId, categoryName} = useParams();\r\n    useParseQueryParamsToState()\r\n    return (\r\n        <Container\r\n            maxWidth='xl'\r\n            className='product-category__wrapper'\r\n        >\r\n            <SearchPageHeader />\r\n            <Products\r\n                categoryId={categoryId}\r\n                categoryName={categoryName}\r\n            />\r\n            <ProductsPagination />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Search;"],"names":["dispatch","useTypedDispatch","React","window","location","search","params","qs","substring","setFilters","setSearchRequest","Grid","item","xs","sm","md","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","categoryId","categoryName","isMounted","clearSearchRequest","useTypedSelector","getFilters","sizes","color","sort","currentPage","itemsLimit","getSearchRequest","navigate","useNavigate","query","p","l","sortBy","property","order","skipNulls","arrayFormat","current","setQueryRequest","requestQuery","useRef","useUpdateQuery","useGetProductCardsQuery","products","data","isLoading","isError","isFetching","refetch","container","spacing","columns","map","product","ProductCard","id","BasicPreloader","itemsToShow","LoadingError","reload","productsArray","replace","pagesCount","setPagesCount","amountOfProducts","length","totalPages","Math","ceil","setItemsCount","count","defaultPage","page","sx","mb","mt","onChange","e","pageNumber","setCurrentPage","searchRequest","state","searchSlice","itemsCount","filterSlice","Container","maxWidth","py","Typography","pb","SearchField","useParams","useParseQueryParamsToState","className","Products","ProductsPagination"],"sourceRoot":""}