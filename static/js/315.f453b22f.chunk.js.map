{"version":3,"file":"static/js/315.f453b22f.chunk.js","mappings":"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","sources":["hooks/useParseQueryParamsToState.ts","hooks/useUpdateQuery.ts","pages/Category/Products.tsx","pages/Category/hooks/useMapProducts.tsx","pages/Category/ProductsPagination.tsx","pages/Search/SearchPageHeader.tsx","pages/Search/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport qs from \"qs\";\r\nimport {setFilters} from \"../store/slices/filterSlice\";\r\nimport {useTypedDispatch} from \"./redux\";\r\nimport {setSearchRequest} from \"../store/slices/searchSlice\";\r\n\r\nconst useParseQueryParamsToState = () => {\r\n    const dispatch = useTypedDispatch();\r\n    React.useEffect(() => {\r\n        if (window.location.search) {\r\n            const params = qs.parse(window.location.search.substring(1))\r\n            dispatch(setFilters(params))\r\n            if (params.search) dispatch(setSearchRequest(params.search as string))\r\n        }}, []\r\n    )\r\n}\r\nexport default useParseQueryParamsToState","import {useTypedDispatch, useTypedSelector} from \"./redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport qs from \"qs\";\r\nimport {setQueryRequest} from \"../store/slices/filterSlice\";\r\nimport {getFilters} from \"../store/selectors/filter\";\r\nimport {getSearchRequest} from \"../store/selectors/search\";\r\nimport {setSearchRequest} from \"../store/slices/searchSlice\";\r\n\r\nconst useUpdateQuery = (\r\n    categoryId: string | undefined,\r\n    isMounted: {current: boolean},\r\n    shouldClearSearchRequest: boolean = false\r\n) => {\r\n    const {sizes, color, sort, currentPage, itemsLimit} = useTypedSelector(getFilters)\r\n    const search = useTypedSelector(getSearchRequest)\r\n    const dispatch = useTypedDispatch()\r\n    const navigate = useNavigate()\r\n    React.useEffect(\r\n        () => {\r\n            if (shouldClearSearchRequest) dispatch(setSearchRequest(null))\r\n            const query = qs.stringify(\r\n                {sizes, color, p: currentPage, l: itemsLimit, sortBy: sort.property, order: sort.order, search},\r\n                {skipNulls: true, arrayFormat: 'comma'}\r\n            )\r\n            if (isMounted.current) navigate(`?${query}`)\r\n            dispatch(setQueryRequest(`${categoryId}/${categoryId}?${query}`))\r\n            isMounted.current = true\r\n        },\r\n        [sizes, color, sort, categoryId, currentPage, itemsLimit, search]\r\n    )\r\n}\r\nexport default useUpdateQuery","import React, {FC, useRef} from 'react'\r\nimport CategoryProductCardLoader from '../../components/Loaders/Category/CategoryProductCardLoader'\r\nimport {Grid} from '@mui/material'\r\nimport {useGetProductCardsQuery} from \"../../services/productsService\";\r\nimport {useTypedSelector} from \"../../hooks/redux\";\r\nimport {getFilters} from \"../../store/selectors/filter\";\r\nimport useUpdateQuery from \"../../hooks/useUpdateQuery\";\r\nimport BasicPreloader from \"../../components/Loaders/BasicPreloader\";\r\nimport LoadingError from \"../../components/LoadingError\";\r\nimport {useMapProducts} from \"./hooks/useMapProducts\";\r\n\r\ninterface Props {\r\n\tcategoryId: string,\r\n\tclearSearchRequest?: boolean\r\n}\r\n\r\nconst Products: FC<Props> = ({\r\n\tcategoryId, clearSearchRequest = false\r\n}) => {\r\n\tconst {requestQuery} = useTypedSelector(getFilters)\r\n\tlet isMounted = useRef(false)\r\n\tuseUpdateQuery(categoryId, isMounted, clearSearchRequest)\r\n\r\n\tconst {\r\n\t\tdata: products, isLoading, isError, isFetching, refetch\r\n\t} = useGetProductCardsQuery(requestQuery)\r\n\r\n\tconst mappedProducts = useMapProducts(isError, isFetching, products, requestQuery)\r\n\r\n\treturn (\r\n\t\t<Grid\r\n\t\t\tcontainer spacing={{ xs: 2, md: 3 }}\r\n\t\t\tcolumns={{ xs: 4, sm: 8, md: 12 }}\r\n\t\t>\r\n\t\t\t{mappedProducts}\r\n\t\t\t<BasicPreloader\r\n\t\t\t\tisLoading={isLoading}\r\n\t\t\t\tisFetching={isFetching}\r\n\t\t\t\titemsToShow={8}\r\n\t\t\t>\r\n\t\t\t\t<CategoryProductCardLoader />\r\n\t\t\t</BasicPreloader>\r\n\t\t\t{isError &&\r\n\t\t\t\t<LoadingError reload={refetch} />\r\n\t\t\t}\r\n\t\t</Grid>\r\n\t)\r\n}\r\n\r\nexport default Products","import React from \"react\";\r\nimport {Grid} from \"@mui/material\";\r\nimport {IProductCard} from \"../../../models/IProductCard\";\r\nimport ProductCard from \"../../../components/ProductCard\";\r\n\r\nexport const useMapProducts = (\r\n    isError: boolean,\r\n    isFetching: boolean,\r\n    products: IProductCard[] | undefined,\r\n    queryParams: string\r\n) => React.useMemo(\r\n    () => {\r\n        const shouldMapProducts = !isFetching && !isError && products\r\n        if (shouldMapProducts) return (\r\n            products.map((product) => (\r\n                <Grid item xs={2} sm={3} md={3} key={product.id}>\r\n                    <ProductCard \r\n                        product={product} \r\n                        queryParams={queryParams}\r\n                    />\r\n                </Grid>\r\n            ))\r\n        )\r\n        else return []\r\n    },\r\n    [products, isFetching, isError]\r\n)","import React from 'react';\r\nimport {Pagination} from \"@mui/material\";\r\nimport {setCurrentPage, setItemsCount} from \"../../store/slices/filterSlice\";\r\nimport {useTypedDispatch, useTypedSelector} from \"../../hooks/redux\";\r\nimport {useGetProductCardsQuery} from \"../../services/productsService\";\r\nimport {getFilters} from \"../../store/selectors/filter\";\r\n\r\nconst ProductsPagination = () => {\r\n    const {currentPage, requestQuery, itemsLimit} = useTypedSelector(getFilters)\r\n    // change limit to see how many pages to show\r\n    // P.S. API doesn't return the amount of products\r\n    const {data: productsArray} = useGetProductCardsQuery(\r\n        requestQuery.replace( `p=${currentPage}&l=${itemsLimit}`, 'p=1&l=999' )\r\n    )\r\n    const dispatch = useTypedDispatch()\r\n    let [pagesCount, setPagesCount] = React.useState(1)\r\n    React.useEffect( () => {\r\n        let amountOfProducts = productsArray ? productsArray.length : 1\r\n        const totalPages = Math.ceil( amountOfProducts / itemsLimit)\r\n        if (totalPages > 1) setPagesCount( totalPages )\r\n        dispatch(setItemsCount(amountOfProducts))\r\n    }, [productsArray, itemsLimit] )\r\n\r\n    const handleChange = ( e: React.ChangeEvent<unknown>, pageNumber: number ) => {\r\n        dispatch(setCurrentPage(pageNumber))\r\n    }\r\n    if (pagesCount < 2) return <span></span>\r\n    return (\r\n        <Pagination\r\n            count={+pagesCount}\r\n            defaultPage={+currentPage}\r\n            page={+currentPage}\r\n            sx={{mb: 6, mt: 3}}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ProductsPagination;","import React from 'react';\r\nimport {Container, Typography} from \"@mui/material\";\r\nimport ProductsSearch from \"../../components/Header/Search/ProductsSearch\";\r\nimport {useTypedSelector} from \"../../hooks/redux\";\r\n\r\nconst SearchPageHeader = () => {\r\n    const searchRequest = useTypedSelector( state => state.searchSlice.searchRequestText )\r\n    const itemsCount = useTypedSelector(state => state.filterSlice.itemsCount)\r\n    return (\r\n        <Container maxWidth='md' sx={{py: 6}} >\r\n            <Typography sx={{pb: 4}}>\r\n                {`${itemsCount} `}\r\n                results for \"{searchRequest}\"\r\n            </Typography>\r\n            <ProductsSearch />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SearchPageHeader;","import React from 'react';\r\nimport {Container} from \"@mui/material\";\r\nimport ProductsPagination from \"../Category/ProductsPagination\";\r\nimport Products from \"../Category/Products\";\r\nimport useParseQueryParamsToState from \"../../hooks/useParseQueryParamsToState\";\r\nimport SearchPageHeader from \"./SearchPageHeader\";\r\nimport {useGetCategoriesQuery} from \"../../services/productsService\";\r\n\r\nconst Search = () => {\r\n    const {data: categories} = useGetCategoriesQuery('')\r\n    const [selectedCategoryId, setSelectedCategoryId] = React.useState<string>(\r\n        categories ? String(categories[0].id) : '1'\r\n    )\r\n    useParseQueryParamsToState()\r\n    return (\r\n        <Container\r\n            maxWidth='xl'\r\n            className='product-category__wrapper'\r\n        >\r\n            <SearchPageHeader />\r\n            <Products categoryId={selectedCategoryId} />\r\n            <ProductsPagination />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Search;"],"names":["dispatch","useTypedDispatch","React","window","location","search","params","qs","substring","setFilters","setSearchRequest","categoryId","isMounted","shouldClearSearchRequest","useTypedSelector","getFilters","sizes","color","sort","currentPage","itemsLimit","getSearchRequest","navigate","useNavigate","query","p","l","sortBy","property","order","skipNulls","arrayFormat","current","setQueryRequest","clearSearchRequest","requestQuery","useRef","useUpdateQuery","useGetProductCardsQuery","products","data","isLoading","isError","isFetching","refetch","mappedProducts","queryParams","map","product","Grid","item","xs","sm","md","ProductCard","id","useMapProducts","container","spacing","columns","BasicPreloader","itemsToShow","CategoryProductCardLoader","LoadingError","reload","productsArray","replace","pagesCount","setPagesCount","amountOfProducts","length","totalPages","Math","ceil","setItemsCount","count","defaultPage","page","sx","mb","mt","onChange","e","pageNumber","setCurrentPage","searchRequest","state","searchSlice","searchRequestText","itemsCount","filterSlice","Container","maxWidth","py","Typography","pb","ProductsSearch","categories","useGetCategoriesQuery","String","selectedCategoryId","useParseQueryParamsToState","className","Products","ProductsPagination"],"sourceRoot":""}